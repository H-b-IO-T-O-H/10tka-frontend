{"ast":null,"code":"var _jsxFileName = \"/home/vlad/10tka/10tka-frontend/src/pages/Home/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"@components/Card\";\nimport Lesson from \"@components/Lesson\";\nimport ButtonsLogo from \"@components/ButtonsLogo\";\nimport \"./Home.scss\";\nimport { makeGet } from \"@utils/network\";\nimport { Urls } from \"@config/urls\";\nimport { Labels } from \"@components/DragAndDrop/config\";\nimport { LessonsTime } from \"@config/config\";\nimport PostsList from \"../PostsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getWeekData = () => {\n  const date = new Date();\n  const today = date.getDate();\n  const weekDay = (date.getDay() + 6) % 7;\n  const weekAgo = today - weekDay;\n  const monthIdx = date.getMonth();\n  const days = [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"];\n  const months = [\"января\", \"февраля\", \"март\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"];\n  const weekType = Math.floor(weekAgo / 7) % 2 === 0 ? \"Зн\" : \"Чс\";\n  return [weekDay, days.map((day, index) => `${day}, ${weekAgo + index} ${months[monthIdx]}`), weekType];\n};\n\nconst prepareLessons = lessons => {\n  return lessons.map((lesson, index) => /*#__PURE__*/_jsxDEV(Lesson, {\n    title: lesson.title,\n    auditorium: lesson.auditorium,\n    time: LessonsTime[index],\n    isEmpty: lesson.lesson_type === \"free\",\n    children: /*#__PURE__*/_jsxDEV(ButtonsLogo, {\n      xs: true,\n      idx: Labels[lesson.lesson_type]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this));\n};\n\nconst prepareWeek = weekDays => {\n  const newList = [];\n  weekDays.forEach((day, index) => {\n    if (day.lessons) {\n      newList[index] = prepareLessons(day.lessons);\n    } else {\n      newList[index] = [];\n    }\n  });\n  return newList;\n};\n\nexport const getWeekType = week_type => {\n  return week_type === \"Чс\" ? 1 : 2;\n};\n\nconst Home = () => {\n  _s();\n\n  const [weekInfo, changeWeekInfo] = useState({\n    weekDay: 0,\n    days: []\n  });\n  const [orgInfo, changeOrgInfo] = useState({\n    group: \"\",\n    week_number: 0,\n    week_type: \"Чс\"\n  });\n  const [lessons, changeLessons] = useState([]);\n  useEffect(() => {\n    const [weekDay, weekData, weekType] = getWeekData();\n    changeWeekInfo({\n      weekDay: weekDay,\n      days: weekData\n    });\n    const userGroup = localStorage.getItem(\"user_group\");\n\n    if (userGroup) {\n      makeGet(Urls.timetable.get(userGroup, getWeekType(weekType))).then(response => {\n        console.log(\"Ответ сервера успешно получен!\");\n        const week = response.data.week;\n        const savedWeek = prepareWeek(week.days);\n        changeLessons(savedWeek);\n        changeOrgInfo({\n          group: week.group,\n          week_type: weekType,\n          week_number: week.week_number\n        });\n      }).catch(error => {\n        console.log(error);\n        return;\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex flex-row justify-content-center align-items-center\",\n      children: orgInfo.group !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timetable__title\",\n        children: `Информация о группе ${orgInfo.group}, ${orgInfo.week_type}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timetable__title\",\n        children: \"\\u0412\\u044B \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043A\\u0440\\u0435\\u043F\\u043B\\u0435\\u043D\\u044B \\u043D\\u0438 \\u043A \\u043E\\u0434\\u043D\\u043E\\u0439 \\u0438\\u0437 \\u0443\\u0447\\u0435\\u0431\\u043D\\u044B\\u0445 \\u0433\\u0440\\u0443\\u043F\\u043F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), orgInfo.group !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Home d-flex flex-row flex-nowrap\",\n      children: weekInfo.days.map((date, index) => /*#__PURE__*/_jsxDEV(Card, {\n        id: index,\n        currentDay: weekInfo.weekDay,\n        title: date,\n        items: lessons[index]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(PostsList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"L0N8cX+JYAxnDDmNmpogS2ULK1k=\");\n\n_c = Home;\nexport default _c2 = /*#__PURE__*/React.memo(Home);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Home\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/vlad/10tka/10tka-frontend/src/pages/Home/Home.tsx"],"names":["React","useEffect","useState","Card","Lesson","ButtonsLogo","makeGet","Urls","Labels","LessonsTime","PostsList","getWeekData","date","Date","today","getDate","weekDay","getDay","weekAgo","monthIdx","getMonth","days","months","weekType","Math","floor","map","day","index","prepareLessons","lessons","lesson","title","auditorium","lesson_type","prepareWeek","weekDays","newList","forEach","getWeekType","week_type","Home","weekInfo","changeWeekInfo","orgInfo","changeOrgInfo","group","week_number","changeLessons","weekData","userGroup","localStorage","getItem","timetable","get","then","response","console","log","week","data","savedWeek","catch","error","memo"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nimport Card from \"@components/Card\";\nimport Lesson from \"@components/Lesson\";\nimport ButtonsLogo from \"@components/ButtonsLogo\";\n\nimport \"./Home.scss\"\nimport {makeGet} from \"@utils/network\";\nimport {Urls} from \"@config/urls\";\nimport {Labels} from \"@components/DragAndDrop/config\";\nimport {LessonsTime} from \"@config/config\";\nimport PostsList from \"../PostsList\";\n\nconst getWeekData = (): [number, string[], string] => {\n    const date = new Date();\n    const today = date.getDate();\n    const weekDay = (date.getDay() + 6) % 7;\n    const weekAgo = today - weekDay;\n\n    const monthIdx = date.getMonth();\n    const days = [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"];\n    const months = [\"января\", \"февраля\", \"март\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"]\n    const weekType = Math.floor(weekAgo / 7) % 2 === 0 ? \"Зн\" : \"Чс\"\n    return [weekDay, days.map((day, index) => (`${day}, ${weekAgo + index} ${months[monthIdx]}`)), weekType]\n}\n\ntype LessonType = {\n    lesson_id: string;\n    title: string;\n    lesson_type: string;\n    auditorium: string;\n}\n\nconst prepareLessons = (lessons: Array<LessonType>) => {\n    return lessons.map((lesson, index) => (\n        <Lesson title={lesson.title} auditorium={lesson.auditorium} time={LessonsTime[index]}\n                isEmpty={lesson.lesson_type === \"free\"}>\n            <ButtonsLogo xs idx={Labels[lesson.lesson_type]}/>\n        </Lesson>\n    ))\n};\n\nconst prepareWeek = (weekDays: Array<{ day_id: string, day_order: number, lessons: Array<LessonType> }>) => {\n    const newList: Array<Array<React.ReactNode>> = [];\n\n    weekDays.forEach((day, index) => {\n        if (day.lessons) {\n            newList[index] = prepareLessons(day.lessons)\n        } else {\n            newList[index] = []\n        }\n    })\n    return newList\n}\n\nexport const getWeekType = (week_type: string) => {\n    return week_type === \"Чс\" ? 1 : 2\n}\n\nconst Home = () => {\n    const [weekInfo, changeWeekInfo] = useState<{ weekDay: number, days: string[] }>({weekDay: 0, days: []})\n    const [orgInfo, changeOrgInfo] = useState({group: \"\", week_number: 0, week_type: \"Чс\"})\n    const [lessons, changeLessons] = useState<Array<Array<React.ReactNode>>>([])\n\n    useEffect(() => {\n\n        const [weekDay, weekData, weekType] = getWeekData();\n\n        changeWeekInfo({weekDay: weekDay, days: weekData});\n        const userGroup = localStorage.getItem(\"user_group\");\n        if (userGroup) {\n            makeGet(Urls.timetable.get(userGroup, getWeekType(weekType))).then((response) => {\n                console.log(\"Ответ сервера успешно получен!\");\n                const week = response.data.week;\n                const savedWeek = prepareWeek(week.days);\n                changeLessons(savedWeek);\n                changeOrgInfo({group: week.group, week_type: weekType, week_number: week.week_number});\n\n            }).catch((error) => {\n                console.log(error);\n                return;\n            });\n        }\n\n    }, [])\n\n    return (\n        <div>\n            <div className=\"d-flex flex-row justify-content-center align-items-center\">\n                {orgInfo.group !== \"\" ?\n                    <div\n                        className=\"timetable__title\">{`Информация о группе ${orgInfo.group}, ${orgInfo.week_type}`}</div> :\n                    <div className=\"timetable__title\">Вы не прикреплены ни к одной из учебных групп</div>\n                }\n            </div>\n            {orgInfo.group !== \"\" ?\n                <div className=\"Home d-flex flex-row flex-nowrap\">\n                    {weekInfo.days.map((date, index) => (\n                        <Card id={index} key={index} currentDay={weekInfo.weekDay} title={date} items={lessons[index]}/>\n                    ))}\n                </div> : null\n            }\n            <PostsList/>\n        </div>\n    )\n}\n\nexport default React.memo(Home);"]},"metadata":{},"sourceType":"module"}