{"ast":null,"code":"/*\n * password-generator\n * Copyright(c) 2011-2020 Bermi Ferrer <bermi@bermilabs.com>\n * MIT Licensed\n */\n(function (root) {\n  var localName, consonant, letter, password, vowel, rand, getRandomValues;\n  letter = /[a-z]$/i;\n  vowel = /[aeiou]$/i;\n  consonant = /[bcdfghjklmnpqrstvwxyz]$/i; // Defines the name of the local variable the passwordGenerator library will use\n  // this is specially useful if window.passwordGenerator is already being used\n  // by your application and you want a different name. For example:\n  //    // Declare before including the passwordGenerator library\n  //    var localPasswordGeneratorLibraryName = 'pass';\n\n  localName = root.localPasswordGeneratorLibraryName || \"generatePassword\";\n\n  password = function (length, memorable, pattern, prefix) {\n    var char = \"\",\n        n,\n        i,\n        validChars = [];\n\n    if (length === null || typeof length === \"undefined\") {\n      length = 10;\n    }\n\n    if (memorable === null || typeof memorable === \"undefined\") {\n      memorable = true;\n    }\n\n    if (pattern === null || typeof pattern === \"undefined\") {\n      pattern = /\\w/;\n    }\n\n    if (prefix === null || typeof prefix === \"undefined\") {\n      prefix = '';\n    } // Non memorable passwords will pick characters from a pre-generated\n    // list of characters\n\n\n    if (!memorable) {\n      for (i = 33; i <= 126; i += 1) {\n        char = String.fromCharCode(i);\n\n        if (char.match(pattern)) {\n          validChars.push(char);\n        }\n      }\n\n      if (!validChars.length) {\n        throw new Error(\"Could not find characters that match the \" + \"password pattern \" + pattern + \". Patterns must match individual \" + \"characters, not the password as a whole.\");\n      }\n    }\n\n    while (prefix.length < length) {\n      if (memorable) {\n        if (prefix.match(consonant)) {\n          pattern = vowel;\n        } else {\n          pattern = consonant;\n        }\n\n        n = rand(33, 126);\n        char = String.fromCharCode(n);\n      } else {\n        char = validChars[rand(0, validChars.length)];\n      }\n\n      if (memorable) {\n        char = char.toLowerCase();\n      }\n\n      if (char.match(pattern)) {\n        prefix = \"\" + prefix + char;\n      }\n    }\n\n    return prefix;\n  };\n\n  rand = function (min, max) {\n    var key,\n        value,\n        arr = new Uint8Array(max);\n    getRandomValues(arr);\n\n    for (key in arr) {\n      if (arr.hasOwnProperty(key)) {\n        value = arr[key];\n\n        if (value >= min && value < max) {\n          return value;\n        }\n      }\n    }\n\n    return rand(min, max);\n  };\n\n  getRandomValues = function (buf) {\n    if (root.crypto && root.crypto.getRandomValues) {\n      root.crypto.getRandomValues(buf);\n    } else if (typeof root.msCrypto === \"object\" && typeof root.msCrypto.getRandomValues === 'function') {\n      root.msCrypto.getRandomValues(buf);\n    } else if (module.exports === password && typeof require !== \"undefined\") {\n      var bytes = require(\"crypto\").randomBytes(buf.length);\n\n      buf.set(bytes);\n    } else {\n      throw new Error(\"No secure random number generator available.\");\n    }\n  };\n\n  (typeof exports !== 'undefined' ? exports : root)[localName] = password;\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = password;\n    }\n  } // Establish the root object, `window` in the browser, or `global` on the server.\n\n})(this);","map":{"version":3,"sources":["/home/vlad/10tka/10tka-frontend/node_modules/password-generator/lib/password-generator.js"],"names":["root","localName","consonant","letter","password","vowel","rand","getRandomValues","localPasswordGeneratorLibraryName","length","memorable","pattern","prefix","char","n","i","validChars","String","fromCharCode","match","push","Error","toLowerCase","min","max","key","value","arr","Uint8Array","hasOwnProperty","buf","crypto","msCrypto","module","exports","require","bytes","randomBytes","set"],"mappings":"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","sourcesContent":["/*\n * password-generator\n * Copyright(c) 2011-2020 Bermi Ferrer <bermi@bermilabs.com>\n * MIT Licensed\n */\n(function (root) {\n\n  var localName, consonant, letter, password, vowel, rand, getRandomValues;\n  letter = /[a-z]$/i;\n  vowel = /[aeiou]$/i;\n  consonant = /[bcdfghjklmnpqrstvwxyz]$/i;\n\n\n  // Defines the name of the local variable the passwordGenerator library will use\n  // this is specially useful if window.passwordGenerator is already being used\n  // by your application and you want a different name. For example:\n  //    // Declare before including the passwordGenerator library\n  //    var localPasswordGeneratorLibraryName = 'pass';\n  localName = root.localPasswordGeneratorLibraryName || \"generatePassword\";\n\n  password = function (length, memorable, pattern, prefix) {\n    var char = \"\", n, i, validChars = [];\n    if (length === null || typeof(length) === \"undefined\") {\n      length = 10;\n    }\n    if (memorable === null || typeof(memorable) === \"undefined\") {\n      memorable = true;\n    }\n    if (pattern === null || typeof(pattern) === \"undefined\") {\n      pattern = /\\w/;\n    }\n    if (prefix === null || typeof(prefix) === \"undefined\") {\n      prefix = '';\n    }\n\n    // Non memorable passwords will pick characters from a pre-generated\n    // list of characters\n    if (!memorable) {\n      for (i = 33; i <= 126; i += 1) {\n        char = String.fromCharCode(i);\n        if (char.match(pattern)) {\n          validChars.push(char);\n        }\n      }\n\n      if (!validChars.length) {\n        throw new Error(\"Could not find characters that match the \" +\n          \"password pattern \" + pattern + \". Patterns must match individual \" +\n          \"characters, not the password as a whole.\");\n      }\n    }\n\n\n    while (prefix.length < length) {\n      if (memorable) {\n        if (prefix.match(consonant)) {\n          pattern = vowel;\n        } else {\n          pattern = consonant;\n        }\n        n = rand(33, 126);\n        char = String.fromCharCode(n);\n      } else {\n        char = validChars[rand(0, validChars.length)];\n      }\n\n      if (memorable) {\n        char = char.toLowerCase();\n      }\n      if (char.match(pattern)) {\n        prefix = \"\" + prefix + char;\n      }\n    }\n    return prefix;\n  };\n\n\n  rand = function (min, max) {\n    var key, value, arr = new Uint8Array(max);\n    getRandomValues(arr);\n    for (key in arr) {\n      if (arr.hasOwnProperty(key)) {\n        value = arr[key];\n        if (value >= min && value < max) {\n          return value;\n        }\n      }\n    }\n    return rand(min, max);\n  };\n\n\n  getRandomValues = function (buf) {\n    if (root.crypto && root.crypto.getRandomValues) {\n      root.crypto.getRandomValues(buf);\n    } else if (typeof root.msCrypto === \"object\" && typeof root.msCrypto.getRandomValues === 'function') {\n      root.msCrypto.getRandomValues(buf);\n    } else if (module.exports === password && typeof require !== \"undefined\") {\n      var bytes = require(\"crypto\").randomBytes(buf.length);\n      buf.set(bytes);\n    } else {\n      throw new Error(\"No secure random number generator available.\");\n    }\n  };\n\n\n  ((typeof exports !== 'undefined') ? exports : root)[localName] = password;\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = password;\n    }\n  }\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n}(this));\n"]},"metadata":{},"sourceType":"script"}