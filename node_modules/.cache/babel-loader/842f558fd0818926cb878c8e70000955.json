{"ast":null,"code":"var _jsxFileName = \"/home/vlad/10tka/10tka-frontend/src/utils/privateRoute.tsx\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { Urls } from \"@config/urls\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  // const history = useHistory()\n  //\n  // useEffect(() => {\n  //     const ServerCheckLogin = async () => {\n  //         return makeGet(`${DOMAIN}${ME}`);\n  //     }\n  //\n  //     ServerCheckLogin().then((r) => {\n  //         if (r.status !== 200) {\n  //             localStorage.setItem(\"loginTime\", \"\");\n  //             history.push(Urls.auth)\n  //         }\n  //     }).catch(() => {\n  //         localStorage.setItem(\"loginTime\", \"\");\n  //         history.push(Urls.auth)\n  //     })\n  // }, [history, history.location.pathname])\n  //const authed = DefaultCheckLogin();\n  const authed = true;\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => authed ? props.location.pathname === \"/\" ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: Urls.feed.slugRoot,\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: Urls.auth,\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_c = PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/home/vlad/10tka/10tka-frontend/src/utils/privateRoute.tsx"],"names":["Redirect","Route","Urls","React","PrivateRoute","component","Component","rest","authed","props","location","pathname","feed","slugRoot","state","from","auth"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,KAAlB,QAA0C,kBAA1C;AACA,SAAoBC,IAApB,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAA+B,OAA/B;;AAUA,OAAO,MAAMC,YAA6B,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAEC,SAAZ;AAAuB,KAAGC;AAA1B,CAAD,KAAqC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAAMC,MAAM,GAAG,IAAf;AAEA,sBACI,QAAC,KAAD,OAAWD,IAAX;AACO,IAAA,MAAM,EAAEE,KAAK,IAAID,MAAM,GACnBC,KAAK,CAACC,QAAN,CAAeC,QAAf,KAA4B,GAA5B,gBACI,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AACVA,QAAAA,QAAQ,EAAET,IAAI,CAACU,IAAL,CAAUC,QADV;AAEVC,QAAAA,KAAK,EAAE;AAACC,UAAAA,IAAI,EAAEN,KAAK,CAACC;AAAb;AAFG;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,gBAMK,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,YAPc,gBAQnB,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AACVE,QAAAA,QAAQ,EAAET,IAAI,CAACc,IADL;AAEVF,QAAAA,KAAK,EAAE;AAACC,UAAAA,IAAI,EAAEN,KAAK,CAACC;AAAb;AAFG;AAAd;AAAA;AAAA;AAAA;AAAA;AATX;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAxCM;KAAMN,Y","sourcesContent":["import {Redirect, Route, useHistory} from \"react-router-dom\";\nimport {DOMAIN, ME, Urls} from \"@config/urls\"\nimport React, {useEffect} from \"react\";\nimport {makeGet} from \"@utils/network\";\nimport {DefaultCheckLogin} from \"../pages/Authorization\";\n\ntype Props = {\n    component: any;\n    path: string;\n    exact?: boolean;\n}\n\nexport const PrivateRoute: React.FC<Props> = ({component: Component, ...rest}) => {\n    // const history = useHistory()\n    //\n    // useEffect(() => {\n    //     const ServerCheckLogin = async () => {\n    //         return makeGet(`${DOMAIN}${ME}`);\n    //     }\n    //\n    //     ServerCheckLogin().then((r) => {\n    //         if (r.status !== 200) {\n    //             localStorage.setItem(\"loginTime\", \"\");\n    //             history.push(Urls.auth)\n    //         }\n    //     }).catch(() => {\n    //         localStorage.setItem(\"loginTime\", \"\");\n    //         history.push(Urls.auth)\n    //     })\n    // }, [history, history.location.pathname])\n\n    //const authed = DefaultCheckLogin();\n    const authed = true;\n\n    return (\n        <Route {...rest}\n               render={props => authed ?\n                   props.location.pathname === \"/\" ?\n                       <Redirect to={{\n                           pathname: Urls.feed.slugRoot,\n                           state: {from: props.location}\n                       }}\n                       /> :\n                       (<Component {...props} />) :\n                   <Redirect to={{\n                       pathname: Urls.auth,\n                       state: {from: props.location}\n                   }}\n                   />\n               }\n        />\n    )\n}"]},"metadata":{},"sourceType":"module"}