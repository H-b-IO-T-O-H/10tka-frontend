{"ast":null,"code":"import generatePassword from \"password-generator\";\nexport const MIN_SNP = 2;\nexport const MAX_SNP = 20;\nexport const MAX_ABOUT = 256;\nexport const ERROR_NAME_FIELD = `Длина имени от ${MIN_SNP} до ${MAX_SNP} символов, допускаются только русские буквы.`;\nexport const ERROR_SURNAME_FIELD = `Длина фамилии от ${MIN_SNP}  до ${MAX_SNP} символов, допускаются только русские буквы.`;\nexport const ERROR_PATRONYMIC_FIELD = `Длина отчества от ${MIN_SNP}  до ${MAX_SNP} символов, допускаются только русские буквы.`;\nexport const ERROR_PHONE_FIELD = \"Неверный номер телефона.\";\nexport const ERROR_EMAIL_FIELD = \"Неверный email.\";\nexport const ERROR_ABOUT_FIELD = `Максимальная длина описания ${MAX_ABOUT} символов.`;\nexport const btnPasswd = {\n  id: \"btn-passwd-generator\",\n  title: \"+\",\n  color: \"#4db6ac\",\n  genPasswd: len => generatePassword(len, false, /[\\w\\d?-]/)\n};\nexport const saveUser = (userInfo, showLabel) => {\n  showLabel({\n    content: \"a\",\n    success: false\n  });\n};\nexport const checkRussian = str => {\n  return /^[а-яА-ЯЁё]+$/.test(str);\n};\nexport const isValid = userValid => {\n  let isFormValid = true;\n  Object.keys(userValid).forEach(key => {\n    if (userValid[key].msg !== \"\") {\n      isFormValid = false;\n      return false;\n    }\n  });\n  return isFormValid;\n};\nexport const notEmpty = (user, canBeEmpty) => {\n  let noEmptyFields = true;\n  Object.keys(user).forEach(key => {\n    const field = user[key].toString();\n\n    if (field === \"\" || field === \"NaN\") {\n      if (canBeEmpty === null || canBeEmpty === void 0 ? void 0 : canBeEmpty.includes(key)) {} else {\n        console.log(key);\n        noEmptyFields = false;\n        return false;\n      }\n    }\n  });\n  return noEmptyFields;\n};","map":{"version":3,"sources":["/home/vlad/10tka/10tka-frontend/src/pages/UsersControl/config.ts"],"names":["generatePassword","MIN_SNP","MAX_SNP","MAX_ABOUT","ERROR_NAME_FIELD","ERROR_SURNAME_FIELD","ERROR_PATRONYMIC_FIELD","ERROR_PHONE_FIELD","ERROR_EMAIL_FIELD","ERROR_ABOUT_FIELD","btnPasswd","id","title","color","genPasswd","len","saveUser","userInfo","showLabel","content","success","checkRussian","str","test","isValid","userValid","isFormValid","Object","keys","forEach","key","msg","notEmpty","user","canBeEmpty","noEmptyFields","field","toString","includes","console","log"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,oBAA7B;AAEA,OAAO,MAAMC,OAAO,GAAG,CAAhB;AACP,OAAO,MAAMC,OAAO,GAAG,EAAhB;AACP,OAAO,MAAMC,SAAS,GAAG,GAAlB;AACP,OAAO,MAAMC,gBAAgB,GAAI,kBAAiBH,OAAQ,OAAMC,OAAQ,8CAAjE;AACP,OAAO,MAAMG,mBAAmB,GAAI,oBAAmBJ,OAAQ,QAAOC,OAAQ,8CAAvE;AACP,OAAO,MAAMI,sBAAsB,GAAI,qBAAoBL,OAAQ,QAAOC,OAAQ,8CAA3E;AACP,OAAO,MAAMK,iBAAiB,GAAG,0BAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,iBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAI,+BAA8BN,SAAU,YAAnE;AAGP,OAAO,MAAMO,SAAS,GAClB;AACIC,EAAAA,EAAE,EAAE,sBADR;AAEIC,EAAAA,KAAK,EAAE,GAFX;AAGIC,EAAAA,KAAK,EAAE,SAHX;AAIIC,EAAAA,SAAS,EAAGC,GAAD,IAAkBf,gBAAgB,CAACe,GAAD,EAAM,KAAN,EAAa,UAAb;AAJjD,CADG;AAQP,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAmBC,SAAnB,KAAsC;AAC1DA,EAAAA,SAAS,CAAC;AAACC,IAAAA,OAAO,EAAE,GAAV;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAAD,CAAT;AACH,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAA0B;AAClD,SAAO,gBAAgBC,IAAhB,CAAqBD,GAArB,CAAP;AACH,CAFM;AAIP,OAAO,MAAME,OAAO,GAAIC,SAAD,IAA4B;AAC/C,MAAIC,WAAW,GAAG,IAAlB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,OAAvB,CAAgCC,GAAD,IAAS;AACpC,QAAIL,SAAS,CAACK,GAAD,CAAT,CAAeC,GAAf,KAAuB,EAA3B,EAA+B;AAC3BL,MAAAA,WAAW,GAAG,KAAd;AACA,aAAO,KAAP;AACH;AACJ,GALD;AAMA,SAAOA,WAAP;AACH,CATM;AAWP,OAAO,MAAMM,QAAQ,GAAG,CAACC,IAAD,EAAWC,UAAX,KAAmD;AACvE,MAAIC,aAAa,GAAG,IAApB;AACAR,EAAAA,MAAM,CAACC,IAAP,CAAYK,IAAZ,EAAkBJ,OAAlB,CAA2BC,GAAD,IAAS;AAC/B,UAAMM,KAAK,GAAGH,IAAI,CAACH,GAAD,CAAJ,CAAUO,QAAV,EAAd;;AACA,QAAID,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK,KAA9B,EAAqC;AACjC,UAAIF,UAAJ,aAAIA,UAAJ,uBAAIA,UAAU,CAAEI,QAAZ,CAAqBR,GAArB,CAAJ,EAA+B,CAC9B,CADD,MACO;AACHS,QAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACAK,QAAAA,aAAa,GAAG,KAAhB;AACA,eAAO,KAAP;AACH;AAEJ;AACJ,GAXD;AAYA,SAAOA,aAAP;AACH,CAfM","sourcesContent":["import generatePassword from \"password-generator\";\n\nexport const MIN_SNP = 2;\nexport const MAX_SNP = 20;\nexport const MAX_ABOUT = 256;\nexport const ERROR_NAME_FIELD = `Длина имени от ${MIN_SNP} до ${MAX_SNP} символов, допускаются только русские буквы.`;\nexport const ERROR_SURNAME_FIELD = `Длина фамилии от ${MIN_SNP}  до ${MAX_SNP} символов, допускаются только русские буквы.`;\nexport const ERROR_PATRONYMIC_FIELD = `Длина отчества от ${MIN_SNP}  до ${MAX_SNP} символов, допускаются только русские буквы.`;\nexport const ERROR_PHONE_FIELD = \"Неверный номер телефона.\";\nexport const ERROR_EMAIL_FIELD = \"Неверный email.\";\nexport const ERROR_ABOUT_FIELD = `Максимальная длина описания ${MAX_ABOUT} символов.`;\n\n\nexport const btnPasswd =\n    {\n        id: \"btn-passwd-generator\",\n        title: \"+\",\n        color: \"#4db6ac\",\n        genPasswd: (len: number) => (generatePassword(len, false, /[\\w\\d?-]/))\n    }\n\nexport const saveUser = (userInfo: object, showLabel: any) => {\n    showLabel({content: \"a\", success: false});\n}\n\nexport const checkRussian = (str: string): boolean => {\n    return /^[а-яА-ЯЁё]+$/.test(str);\n}\n\nexport const isValid = (userValid: {}): boolean => {\n    let isFormValid = true;\n    Object.keys(userValid).forEach((key) => {\n        if (userValid[key].msg !== \"\") {\n            isFormValid = false;\n            return false;\n        }\n    })\n    return isFormValid;\n}\n\nexport const notEmpty = (user: {}, canBeEmpty?: Array<string>): boolean => {\n    let noEmptyFields = true;\n    Object.keys(user).forEach((key) => {\n        const field = user[key].toString();\n        if (field === \"\" || field === \"NaN\") {\n            if (canBeEmpty?.includes(key)) {\n            } else {\n                console.log(key)\n                noEmptyFields = false;\n                return false;\n            }\n\n        }\n    })\n    return noEmptyFields;\n}"]},"metadata":{},"sourceType":"module"}